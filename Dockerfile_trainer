# syntax=docker/dockerfile:1

# small linux os with python
FROM nvidia/cuda:11.6.2-runtime-ubuntu20.04

ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update
RUN apt-get install --no-install-recommends --no-install-suggests -y curl
RUN apt-get install unzip
RUN apt-get -y install python3 python3-pip

# docker volumes
RUN mkdir -p /app/mc-data
RUN mkdir -p /Configs
RUN mkdir -p /Missions

# all below copied files will be inside dir /app
WORKDIR /app

# install python requirements inside docker image
COPY ./Trainer/requirements.txt requirements.txt
RUN pip3 install --upgrade pip
RUN pip3 install -r requirements.txt

# dependencies needed for cv2
RUN apt-get update && apt-get install ffmpeg libsm6 libxext6  -y
# copy all needed src files, configs and documentation to the docker image (no test files)
COPY ./Models ./Models

COPY ./Trainer/main.py ./main.py
COPY ./Trainer/mineflayer-stack.yaml ./mineflayer-stack.yaml
COPY ./utils ./utils

# all below copied files will be inside dir /Config
WORKDIR /Configs
COPY ./Configs/trainer-parameters.json ./trainer-parameters.json
COPY ./Configs/model-parameters.json ./model-parameters.json
COPY ./Configs/base-movement-actions.json ./base-movement-actions.json
COPY ./Configs/run-parameters.json ./run-parameters.json
COPY ./Configs/forest-seeds.txt ./forest-seeds.txt

WORKDIR /Missions
COPY ./Missions .

# swapping back to app context to start the main program
WORKDIR /app

# publish inner backend port
EXPOSE 9001
EXPOSE 5000-5100

# run entrypoint
# the main() function in main.py will not exceuted using docker. Instead the cotnent of main() is executed here:
CMD ["python3", "-u", "main.py"]
